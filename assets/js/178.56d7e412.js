(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{471:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"托管文本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#托管文本"}},[t._v("#")]),t._v(" 托管文本")]),t._v(" "),s("p",[t._v("托管文本功能允许管理（替换）整个Naninovel中使用的各种文本元素，例如游戏中的UI和使用本地化文档显示角色名称。")]),t._v(" "),s("p",[t._v("要生成托管文本文档，通过"),s("code",[t._v("Naninovel -> Tools -> Managed Text")]),t._v(" 菜单打开托管文本工具。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.gyazo.com/200680de85848f04a2eb51b063295c51.png",alt:"Managed Text Tool"}})]),t._v(" "),s("p",[t._v('使用"Select"（选择）按钮，选择要存储托管文本文件的路径（默认应该为： '),s("code",[t._v("Resources/Naninovel/Text")]),t._v(' ），然后点击 "Generate" 生成按钮来创建文件。')]),t._v(" "),s("p",[t._v("可以通过 "),s("code",[t._v("Create -> Naninovel -> Managed Text")]),t._v(" 来创建自定义托管文本文件。")]),t._v(" "),s("p",[t._v("托管文本文档中的每一行都是以下格式的表达式：Path：Value，其中Path是文本变量的路径，而Value是该变量的值。例如，以下是“ DefaultUI”文档的默认内容，其中包含内置UI的记录：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.gyazo.com/ce57c700b77818f87aabb722f2f42b78.png",alt:"Managed Text Document"}})]),t._v(" "),s("p",[t._v("你可以编辑所有值，更改将在下次运行时应用。")]),t._v(" "),s("p",[t._v("开启 "),s("code",[t._v("Delete Unused")]),t._v(" 属性会移除托管文本文件中没有过被"),s("code",[t._v("ManagedTextProvider")]),t._v("和"),s("code",[t._v("ManagedText")]),t._v("源码中引用的条目。")]),t._v(" "),s("h2",{attrs:{id:"托管文本加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#托管文本加载器"}},[t._v("#")]),t._v(" 托管文本加载器")]),t._v(" "),s("p",[t._v("可以通过 "),s("code",[t._v("ManagedTextProvider")]),t._v(" 组件不用代码，将任意Unity物体和托管文本相关联；\n在该物体挂载该组件，定义类别（包含该记录的文件名），键值（文本内该记录的名字）并使用 "),s("code",[t._v("OnValueChanged")]),t._v(" 事件绑定该值到游戏物体。")]),t._v(" "),s("p",[t._v('以下是将"MyCustomDocument"文本文件中 "MyCustomText" 的值绑定到Unity的 "Text" 组件的示例：')]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.gyazo.com/f47a997052674341aa3133deeea1f1cf.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("ManagedTextProvider")]),t._v("  组件用于自定义UI时，文本打字机，选择处理，使用托管文本工具生成时，对应记录会自动生成（这些UI已在配置菜单配置）；其他情况就需要自己手动添加记录了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.gyazo.com/cc2ad398d1ad716cca437913553eb09c.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"托管文本变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#托管文本变量"}},[t._v("#")]),t._v(" 托管文本变量")]),t._v(" "),s("p",[t._v("托管文本记录也可和源码中的变量绑定。在任意C#代码中的静态字符串（string）字段前添加 "),s("code",[t._v("ManagedText")]),t._v(" 标记。该值就会在引擎初始化的时候覆写托管文本中的配置值。")]),t._v(" "),s("p",[t._v("以下是C#中使用该功能来为文本标签进行赋值的示例：")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("Naninovel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("UnityEngine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UI")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承UI的Text组件Inheriting our class from the Unity's text component, so we can use it as one.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomLabel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-list"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"CustomLabel.LabelText"的值会和托管文本值关联到下面的值，并会在地区选择改变时更新。')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token attribute"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ManagedText")]),s("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyCustomUI"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "MyCustomUI" 是保存该文本值的托管文本文件名')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" LabelText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Default Value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Default Value" 为默认值')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" Awake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("base")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Awake")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LabelText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将当前托管文本内的值赋值到该文本对象")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 运行时，当地区选择改变时，更新该值")]),t._v("\n        Engine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetService")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ILocalizationManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OnLocaleChanged "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" _ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LabelText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"脚本获取托管文本值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚本获取托管文本值"}},[t._v("#")]),t._v(" 脚本获取托管文本值")]),t._v(" "),s("p",[t._v("可以直接从naninovel脚本获取托管文本值。当脚本中需要使用部分值，或是做本地化的时候会很方便。")]),t._v(" "),s("p",[t._v("创建名为“script”的托管文本，为里面的条目添加 "),s("code",[t._v("T_")]),t._v(" 或 "),s("code",[t._v("t_")]),t._v(" 前缀。现在就可以在脚本表达式中引用该值了；如下为托管文本内容示例：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("T_Greeting1: Hey!\nT_Greeting2: Hello!\nT_Greeting3: Hi!\n")])])]),s("p",[t._v("— 你可以在脚本像如下引用:")]),t._v(" "),s("div",{staticClass:"language-nani extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nani"}},[s("code",[s("span",{pre:!0,attrs:{class:"token command function"}},[s("span",{pre:!0,attrs:{class:"token command-name"}},[t._v("@print")]),s("span",{pre:!0,attrs:{class:"token whitespaces"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token expression selector"}},[t._v("{Random(T_Greeting1,T_Greeting2,T_Greeting3)}")])]),t._v("\n")])])]),s("p",[t._v('当然，"Script" 也可以像其他托管文本一样的方式来做本地化；当用户改变地区设置的时候，文本就会自动从相应的本地化文本中获取值。')]),t._v(" "),s("h2",{attrs:{id:"本地化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地化"}},[t._v("#")]),t._v(" 本地化")]),t._v(" "),s("p",[t._v("托管文本本地化过程类似于naninovel脚本：\nManaged text localization process resemble the one for naninovel scripts:")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Resources/Naninovel/Text")]),t._v(" 文件夹中生成（创建，编辑）所需的托管文本文档。")]),t._v(" "),s("li",[t._v("在语言环境文件夹("),s("code",[t._v("Resources/Naninovel/Localization/{Locale}")]),t._v("，"),s("code",[t._v("{Locale}")]),t._v("是目标语言环境的标记）中运行本地化实用程序。")]),t._v(" "),s("li",[t._v("托管文本文档的本地化文档将出现在相应的语言环境文件夹中。对它们进行对应语言的添加或编辑翻译。")])]),t._v(" "),s("p",[t._v("要更新托管文本和其对应的本地文件，在"),s("code",[t._v("Resources/Naninovel/Text")]),t._v(" 目录运行本地化实用程序，然后选择"),s("code",[t._v("Resources/Naninovel/Localization/{Locale}")]),t._v(" 文件夹。他们会尝试保存所有已有的修改（托管文本记录和其翻译），因此你不必每次都重头开始编辑所有内容。")]),t._v(" "),s("p",[t._v("有关如何使用本地化实用程序的更多信息，请参见"),s("RouterLink",{attrs:{to:"/zh/guide/localization.html"}},[t._v("本地化")]),t._v(" 。")],1),t._v(" "),s("div",{staticClass:"custom-block example"},[s("p",{staticClass:"custom-block-title"},[t._v("例")]),t._v(" "),s("p",[t._v("可以参考本地化示例（包含托管文本）"),s("RouterLink",{attrs:{to:"/zh/guide/getting-started.html#Demo-工程示例"}},[t._v("示例工程")]),t._v("。 如果你在自己的项目中遇到问题，请用做参考。")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);